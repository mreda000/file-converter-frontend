{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mohah\\\\file-converter\\\\frontend\\\\src\\\\components\\\\FileConverter.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FileConverter() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [conversionType, setConversionType] = useState(\"pdf-to-excel\");\n  const conversionDescriptions = {\n    \"pdf-to-excel\": \"üìÑ Converts a PDF file into an Excel spreadsheet, extracting tables and structured data.\",\n    \"pdf-to-word\": \"üìÑ Converts a PDF file into an editable Word document.\",\n    \"pdf-to-image\": \"üìÑ Converts each page of a PDF into a separate image.\",\n    \"pdf-to-text\": \"üìÑ Extracts plain text from a PDF file.\",\n    \"merge-pdfs\": \"üìë Combines multiple PDFs into one single document.\",\n    \"split-pdf\": \"üìë Splits a PDF into multiple smaller PDF files.\",\n    \"compress-pdf\": \"üìâ Reduces the file size of a PDF without losing quality.\",\n    \"image-to-pdf\": \"üñºÔ∏è Converts image files (JPG, PNG) into a PDF document.\",\n    \"image-to-text\": \"üñºÔ∏è Extracts text from an image using OCR technology.\",\n    \"csv-to-excel\": \"üìä Converts a CSV file into an Excel spreadsheet.\",\n    \"excel-to-csv\": \"üìä Converts an Excel spreadsheet into a CSV file.\",\n    \"word-to-pdf\": \"üìù Converts a Word document into a PDF file.\",\n    \"text-to-pdf\": \"üìù Converts plain text into a formatted PDF document.\",\n    \"json-to-csv\": \"üíæ Converts JSON data into a structured CSV file.\",\n    \"mp3-to-wav\": \"üéµ Converts an MP3 audio file into a WAV format.\",\n    \"video-to-gif\": \"üé¨ Converts a video clip into an animated GIF file.\"\n  };\n  const onDrop = acceptedFiles => {\n    setFile(acceptedFiles[0]);\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop,\n    multiple: false\n  });\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!file) {\n      setMessage(\"‚ö†Ô∏è Please select a file.\");\n      return;\n    }\n    setMessage(\"‚è≥ Uploading and converting... Please wait.\");\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"conversionType\", conversionType);\n    try {\n      const response = await fetch(\"https://file-converter-backend-jl7o.onrender.com/upload\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(\"‚ùå File conversion failed.\");\n      }\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `converted.${conversionType.split('-').pop()}`;\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n      setMessage(\"‚úÖ Conversion successful! File downloaded.\");\n    } catch (error) {\n      setMessage(\"‚ùå Error converting file.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-md mx-auto bg-green-100 rounded-xl shadow-md space-y-4 text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold text-green-800\",\n      children: \"\\uD83D\\uDD04 File Converter \\uD83C\\uDF0D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-green-700\",\n      children: \"\\uD83C\\uDF1F Select a conversion type and upload your file. \\uD83D\\uDE80\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"w-full p-2 border rounded bg-white text-green-900\",\n      value: conversionType,\n      onChange: e => setConversionType(e.target.value),\n      children: Object.keys(conversionDescriptions).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: key,\n        children: [conversionDescriptions[key].split(\" \")[0], \" \", key.replace(/-/g, \" \").toUpperCase()]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ...getRootProps(),\n      className: \"border-2 border-green-500 border-dashed p-6 cursor-pointer bg-green-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), file ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-green-900\",\n        children: [\"\\uD83D\\uDCCE \", file.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-green-900\",\n        children: \"\\uD83D\\uDCE5 Drop a file here, or click to select one.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 76\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      className: \"w-full bg-green-600 text-white p-2 rounded mt-3\",\n      disabled: !file,\n      children: \"\\uD83D\\uDD04 Convert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-sm text-green-800\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-sm text-green-800 mt-3\",\n      children: [\"\\u2139\\uFE0F \", conversionDescriptions[conversionType]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(FileConverter, \"AkfD6ba+HDRFc0rajkYswL8bHmk=\", false, function () {\n  return [useDropzone];\n});\n_c = FileConverter;\nvar _c;\n$RefreshReg$(_c, \"FileConverter\");","map":{"version":3,"names":["useState","useDropzone","jsxDEV","_jsxDEV","FileConverter","_s","file","setFile","message","setMessage","conversionType","setConversionType","conversionDescriptions","onDrop","acceptedFiles","getRootProps","getInputProps","multiple","handleSubmit","event","preventDefault","formData","FormData","append","response","fetch","method","body","ok","Error","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","split","pop","appendChild","click","remove","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","Object","keys","map","key","replace","toUpperCase","name","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/mohah/file-converter/frontend/src/components/FileConverter.js"],"sourcesContent":["import { useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\n\nexport default function FileConverter() {\n    const [file, setFile] = useState(null);\n    const [message, setMessage] = useState(\"\");\n    const [conversionType, setConversionType] = useState(\"pdf-to-excel\");\n\n    const conversionDescriptions = {\n        \"pdf-to-excel\": \"üìÑ Converts a PDF file into an Excel spreadsheet, extracting tables and structured data.\",\n        \"pdf-to-word\": \"üìÑ Converts a PDF file into an editable Word document.\",\n        \"pdf-to-image\": \"üìÑ Converts each page of a PDF into a separate image.\",\n        \"pdf-to-text\": \"üìÑ Extracts plain text from a PDF file.\",\n        \"merge-pdfs\": \"üìë Combines multiple PDFs into one single document.\",\n        \"split-pdf\": \"üìë Splits a PDF into multiple smaller PDF files.\",\n        \"compress-pdf\": \"üìâ Reduces the file size of a PDF without losing quality.\",\n        \"image-to-pdf\": \"üñºÔ∏è Converts image files (JPG, PNG) into a PDF document.\",\n        \"image-to-text\": \"üñºÔ∏è Extracts text from an image using OCR technology.\",\n        \"csv-to-excel\": \"üìä Converts a CSV file into an Excel spreadsheet.\",\n        \"excel-to-csv\": \"üìä Converts an Excel spreadsheet into a CSV file.\",\n        \"word-to-pdf\": \"üìù Converts a Word document into a PDF file.\",\n        \"text-to-pdf\": \"üìù Converts plain text into a formatted PDF document.\",\n        \"json-to-csv\": \"üíæ Converts JSON data into a structured CSV file.\",\n        \"mp3-to-wav\": \"üéµ Converts an MP3 audio file into a WAV format.\",\n        \"video-to-gif\": \"üé¨ Converts a video clip into an animated GIF file.\"\n    };\n\n    const onDrop = (acceptedFiles) => {\n        setFile(acceptedFiles[0]);\n    };\n\n    const { getRootProps, getInputProps } = useDropzone({\n        onDrop,\n        multiple: false,\n    });\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        if (!file) {\n            setMessage(\"‚ö†Ô∏è Please select a file.\");\n            return;\n        }\n        \n        setMessage(\"‚è≥ Uploading and converting... Please wait.\");\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"conversionType\", conversionType);\n\n        try {\n            const response = await fetch(\"https://file-converter-backend-jl7o.onrender.com/upload\", {\n                method: \"POST\",\n                body: formData,\n            });\n            \n            if (!response.ok) {\n                throw new Error(\"‚ùå File conversion failed.\");\n            }\n\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = `converted.${conversionType.split('-').pop()}`;\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n            setMessage(\"‚úÖ Conversion successful! File downloaded.\");\n        } catch (error) {\n            setMessage(\"‚ùå Error converting file.\");\n        }\n    };\n\n    return (\n        <div className=\"p-6 max-w-md mx-auto bg-green-100 rounded-xl shadow-md space-y-4 text-center\">\n            <h1 className=\"text-2xl font-bold text-green-800\">üîÑ File Converter üåç</h1>\n            <p className=\"text-green-700\">üåü Select a conversion type and upload your file. üöÄ</p>\n            \n            <select \n                className=\"w-full p-2 border rounded bg-white text-green-900\" \n                value={conversionType} \n                onChange={(e) => setConversionType(e.target.value)}\n            >\n                {Object.keys(conversionDescriptions).map((key) => (\n                    <option key={key} value={key}>{conversionDescriptions[key].split(\" \")[0]} {key.replace(/-/g, \" \").toUpperCase()}</option>\n                ))}\n            </select>\n            \n            <div {...getRootProps()} className=\"border-2 border-green-500 border-dashed p-6 cursor-pointer bg-green-200\">\n                <input {...getInputProps()} />\n                {file ? <p className=\"text-green-900\">üìé {file.name}</p> : <p className=\"text-green-900\">üì• Drop a file here, or click to select one.</p>}\n            </div>\n            \n            <button onClick={handleSubmit} className=\"w-full bg-green-600 text-white p-2 rounded mt-3\" disabled={!file}>\n                üîÑ Convert\n            </button>\n            \n            {message && <p className=\"text-sm text-green-800\">{message}</p>}\n            \n            <p className=\"text-sm text-green-800 mt-3\">‚ÑπÔ∏è {conversionDescriptions[conversionType]}</p>\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}